#include "ros/ros.h"
#include "motoman_msgs/WriteSingleIO.h"
#include "motoman_msgs/ReadSingleIO.h"
#include <cstdlib>
#include <iostream>


void open_gripper(motoman_msgs::WriteSingleIO & srv_write, ros::ServiceClient & client_write,
		motoman_msgs::ReadSingleIO & srv_read, ros::ServiceClient & client_read){
	srv_read.request.address = 20050;
	client_read.call(srv_read);
	if(srv_read.response.value == 0){
		srv_write.request.address = 10032;
		srv_write.request.value = 0;
		if(client_write.call(srv_write)){
			std::cout << "Reset 10032" << std::endl;
		}
		srv_write.request.address = 10033;
		srv_write.request.value = 1;
		if(client_write.call(srv_write)){
			std::cout << "Set 10033" << std::endl;
		}
	}else{
		std::cout << "Gripper already open..." << std::endl;
	}
}

void close_gripper(motoman_msgs::WriteSingleIO & srv_write, ros::ServiceClient & client_write,
		motoman_msgs::ReadSingleIO & srv_read, ros::ServiceClient & client_read){
	srv_read.request.address = 20050;
	client_read.call(srv_read);
	if(srv_read.response.value == 1){
		srv_write.request.address = 10033;
		srv_write.request.value = 0;
		if(client_write.call(srv_write)){
			std::cout << "Reset 10033" << std::endl;
		}
		srv_write.request.address = 10032;
		srv_write.request.value = 1;
		if(client_write.call(srv_write)){
			std::cout << "Set 10032" << std::endl;
		}
	}else{
		std::cout << "Gripper already closed..." << std::endl;
	}
}

int main(int argc, char *argv[]){
	ros::init(argc, argv, "open_close_gripper");
	ros::NodeHandle nh;
	motoman_msgs::WriteSingleIO srv_write;
	ros::ServiceClient client_write = nh.serviceClient<motoman_msgs::WriteSingleIO>("motoman_msgs/WriteSingleIO");

	motoman_msgs::ReadSingleIO srv_read;
	ros::ServiceClient client_read = nh.serviceClient<motoman_msgs::ReadSingleIO>("motoman_msgs/ReadSingleIO");

	open_gripper(srv_write, client_write, srv_read, client_read);
	sleep(2.0);
	close_gripper(srv_write, client_write, srv_read, client_read);
	sleep(2.0);

	ros::waitForShutdown();
	return 0;
}
