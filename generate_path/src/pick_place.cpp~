#include <ros/ros.h>
#include <moveit/move_group_interface/move_group.h>
#include <moveit/planning_scene_interface/planning_scene_interface.h>
#include <moveit_msgs/DisplayRobotState.h>
#include <moveit_msgs/DisplayTrajectory.h>
#include <moveit_msgs/AttachedCollisionObject.h>
#include <moveit_msgs/CollisionObject.h>

#include <moveit/planning_scene_monitor/planning_scene_monitor.h>
#include <geometric_shapes/solid_primitive_dims.h>



void pick(moveit::planning_interface::MoveGroup &group){
 std::vector<moveit_msgs::Grasp> grasps;

 geometry_msgs::PoseStamped p;
 p.header.frame_id = "base_rail_link";
 p.pose.position.x = 4.32;
 p.pose.position.y = -0.7;
 p.pose.position.z = 0.5;
 p.pose.orientation.x = 0;
 p.pose.orientation.y = 0;
 p.pose.orientation.z = 0;
 p.pose.orientation.w = 1;

 moveit_msgs::Grasp g;
 g.grasp_pose = p;

 g.pre_grasp_approach.direction.vector.z = 0.6;
 g.pre_grasp_approach.direction.header.frame_id = "base_rail_link";
 g.pre_grasp_approach.min_distance = 0.2;
 g.pre_grasp_approach.desired_distance = 0.4;

 g.post_grasp_retreat.direction.header.frame_id = "base_rail_link";
 g.post_grasp_retreat.direction.vector.z = 1.0;
 g.post_grasp_retreat.min_distance = 0.1;
 g.post_grasp_retreat.desired_distance = 0.25;

 grasps.push_back(g);
 group.setSupportSurfaceName("table");
 group.pick("part", grasps);
}


void place(moveit::planning_interface::MoveGroup &group){
 std::vector<moveit_msgs::PlaceLocation> loc;

 geometry_msgs::PoseStamped p;
 p.header.frame_id = "base_rail_link";
 p.pose.position.x = 3.32;
 p.pose.position.y = 0.4;
 p.pose.position.z = 0.5;
 p.pose.orientation.x = 0;
 p.pose.orientation.y = 0;
 p.pose.orientation.z = 0;
 p.pose.orientation.w = 1;

 moveit_msgs::PlaceLocation g;
 g.place_pose = p;

 g.pre_place_approach.direction.vector.z = -1.0;
 g.post_place_retreat.direction.vector.x = -1.0;
 g.post_place_retreat.direction.header.frame_id = "base_rail_link";
 g.pre_place_approach.direction.header.frame_id = "base_rail_link";
 g.pre_place_approach.min_distance = 0.1;
 g.pre_place_approach.desired_distance = 0.2;
 g.post_place_retreat.min_distance = 0.1;
 g.post_place_retreat.desired_distance = 0.25;

 loc.push_back(g);
 group.setSupportSurfaceName("table");

 // set planner
 group.setPlannerId("RRTConnectkConfigDefault");

 group.place("part", loc);
}




int main(int argc, char *argv[]){
 ros::init(argc, argv, "pick_place");
 ros::NodeHandle nh;
 ros::AsyncSpinner spinner(1);
 spinner.start();

 ros::Publisher pub_co = nh.advertise<moveit_msgs::CollisionObject>("collision_object", 10);
 ros::Publisher pub_aco = nh.advertise<moveit_msgs::AttachedCollisionObject>("attached_collision_object", 10);

 ros::WallDuration(1.0).sleep();

 moveit::planning_interface::MoveGroup group("arm_on_rail");
 group.setPlanningTime(45.0);

 moveit_msgs::CollisionObject co;
 co.header.stamp = ros::Time::now();
 co.header.frame_id = "base_rail_link";

 // remove pole
 co.id = "pole";
 co.operation = moveit_msgs::CollisionObject::REMOVE;
 pub_co.publish(co);

 // add pole
 co.operation = moveit_msgs::CollisionObject::ADD;
 co.primitives.resize(1);
 co.primitives[0].type = shape_msgs::SolidPrimitive::BOX;
 co.primitives[0].dimensions.resize(geometric_shapes::SolidPrimitiveDimCount<shape_msgs::SolidPrimitive::BOX>::value);
 co.primitives[0].dimensions[shape_msgs::SolidPrimitive::BOX_X] = 0.3;
 co.primitives[0].dimensions[shape_msgs::SolidPrimitive::BOX_Y] = 0.1;
 co.primitives[0].dimensions[shape_msgs::SolidPrimitive::BOX_Z] = 1.0;
 co.primitive_poses.resize(1);
 co.primitive_poses[0].position.x = 4.7;
 co.primitive_poses[0].position.y = -0.4;
 co.primitive_poses[0].position.z = 0.85;
 co.primitive_poses[0].orientation.w = 1.0;
 pub_co.publish(co);


 // remove table
 co.id = "table";
 co.operation = moveit_msgs::CollisionObject::REMOVE;
 pub_co.publish(co);

 // add table
 co.operation = moveit_msgs::CollisionObject::ADD;
 co.primitives[0].dimensions[shape_msgs::SolidPrimitive::BOX_X] = 0.5;
 co.primitives[0].dimensions[shape_msgs::SolidPrimitive::BOX_Y] = 1.5;
 co.primitives[0].dimensions[shape_msgs::SolidPrimitive::BOX_Z] = 0.35;
 co.primitive_poses[0].position.x = 4.7;
 co.primitive_poses[0].position.y = -0.2;
 co.primitive_poses[0].position.z = 0.175;
 pub_co.publish(co);

 

 co.id = "part";
 co.operation = moveit_msgs::CollisionObject::REMOVE;
 pub_co.publish(co);

 moveit_msgs::AttachedCollisionObject aco;
 aco.object = co;
 pub_aco.publish(aco);
/*
 co.operation = moveit_msgs::CollisionObject::ADD;
 co.primitives[0].dimensions[shape_msgs::SolidPrimitive::BOX_X] = 0.15;
 co.primitives[0].dimensions[shape_msgs::SolidPrimitive::BOX_Y] = 0.1;
 co.primitives[0].dimensions[shape_msgs::SolidPrimitive::BOX_Z] = 0.3;
 co.primitive_poses[0].position.x = 4.6;
 co.primitive_poses[0].position.y = -0.7;
 co.primitive_poses[0].position.z = 0.5;
 pub_co.publish(co);
*/
 // wait a bit
 ros::WallDuration(1.0).sleep();

 pick(group);

 ros::WallDuration(1.0).sleep();

 place(group);

 ros::waitForShutdown();
}


